name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  id-token: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          # Extract changelog section for current version
          awk '/^## v'"${{ steps.version.outputs.version }}"'/{flag=1; next} /^## v[0-9]/{flag=0} flag' CHANGELOG.md > release_notes.md
          echo "Release notes:"
          cat release_notes.md

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    environment:
      name: pypi
      url: https://pypi.org/p/data-extractor

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run tests
        run: |
          uv run pytest -x --tb=short
        env:
          DATA_EXTRACTOR_ENABLE_JAVASCRIPT: "false"

      - name: Build package
        run: uv build

      - name: Check package
        run: |
          uv add --dev twine
          uv run twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/
          asset_name: distributions
          asset_content_type: application/zip
